steps:
  - script: |
      set -e
      
      echo "=== Run ansible playbook from deployer ==="
      ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
      source /etc/profile.d/deploy_server.sh

      echo "=== Install yq on deployer for modifying yaml ==="
      sudo add-apt-repository ppa:rmescandon/yq
      sudo apt update
      sudo apt install yq -y
      sudo ln -s /usr/bin/yq /usr/local/bin/yq

      echo "=== Login using pipeline spn ==="
      az login --service-principal -u $(hana-pipeline-spn-id) -p $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none

      saplib_rg_name=${{parameters.saplib_rg_name}}
      saplandscape_rg=${{parameters.saplandscape_rg_name}}
      sapsystem_rg_name=${{parameters.sapsystem_rg_name}}
      repo_dir=$HOME/Azure_SAP_Automated_Deployment/sap-hana
      ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/SAP_SYSTEM/${sapsystem_rg_name}

      echo "=== Retrieving SSH key pairs from sap_landscape KV ==="
      landscape_kv_name=$(az keyvault list --resource-group ${saplandscape_rg} | jq -r "'".[] | select(.name | contains(\\\"user\\\")).name"'")
      sid_private_key_secret_name=$(az keyvault secret list --vault-name ${landscape_kv_name} | jq -r "'".[] | select(.name | contains(\\\"iscsi\\\") | not) | select(.name | contains(\\\"sshkey\\\")) | select(.name | contains(\\\"pub\\\") | not).name"'")
      sid_public_key_secret_name=$(az keyvault secret list --vault-name ${landscape_kv_name} | jq -r "'".[] | select(.name | contains(\\\"iscsi\\\") | not) | select(.name | contains(\\\"sshkey\\\")) | select(.name | contains(\\\"pub\\\")).name"'")
      iscsi_private_key_secret_name=$(az keyvault secret list --vault-name ${landscape_kv_name} | jq -r "'".[] | select(.name | contains(\\\"iscsi\\\")) | select(.name | contains(\\\"sshkey\\\")) | select(.name | contains(\\\"pub\\\") | not).name"'")
      iscsi_public_key_secret_name=$(az keyvault secret list --vault-name ${landscape_kv_name} | jq -r "'".[] | select(.name | contains(\\\"iscsi\\\")) | select(.name | contains(\\\"sshkey\\\")) | select(.name | contains(\\\"pub\\\")).name"'")

      rm -f ${ws_dir}/sshkey
      az keyvault secret show --vault-name ${landscape_kv_name} --name ${sid_private_key_secret_name} | jq -r .value > ${ws_dir}/sshkey
      chmod 600 ${ws_dir}/sshkey

      rm -f ${ws_dir}/sshkey.pub
      az keyvault secret show --vault-name ${landscape_kv_name} --name ${sid_public_key_secret_name} | jq -r .value > ${ws_dir}/sshkey.pub
      chmod 644 ${ws_dir}/sshkey.pub

      rm -f ${ws_dir}/iscsi_sshkey
      az keyvault secret show --vault-name ${landscape_kv_name} --name ${iscsi_private_key_secret_name} | jq -r .value > ${ws_dir}/iscsi_sshkey
      chmod 600 ${ws_dir}/iscsi_sshkey

      rm -f ${ws_dir}/iscsi_sshkey.pub
      az keyvault secret show --vault-name ${landscape_kv_name} --name ${iscsi_public_key_secret_name} | jq -r .value > ${ws_dir}/iscsi_sshkey.pub
      chmod 644 ${ws_dir}/iscsi_sshkey.pub

      echo "=== Update hosts.yml with iscsi ssh keyfiles ==="
      yq w -i ${ws_dir}/ansible_config_files/hosts.yml all.children.iscsi.hosts.*.ansible_ssh_private_key_file ${ws_dir}/iscsi_sshkey

      echo "=== Retrieving sapbits SA information ==="
      sa_name=$(az storage account list --resource-group ${saplib_rg_name} | jq -r "'".[] | select(.name | contains(\\\"saplib\\\")).name"'")
      sa_storage_access_key=$(az storage account keys list --account-name ${sa_name} | jq -r "'".[0].value"'")
      sa_file_share_name=$(az storage share list --account-name ${sa_name} --account-key ${sa_storage_access_key} | jq -r "'".[0].name"'")

      echo "=== Checkout required branch ${{parameters.branch_name}} ==="
      cd ${repo_dir} && git pull && git checkout ${{parameters.branch_name}}
      
      echo "=== Run ansible playbook ==="
      echo "=== This may take quite a while, please be patient ==="
      ansible-playbook --version
      export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      export ANSIBLE_HOST_KEY_CHECKING=False
      source ${ws_dir}/export-clustering-sp-details.sh
      cd ~/Azure_SAP_Automated_Deployment

      output_json=${ws_dir}/ansible_config_files/output.json
      updated_output_json=$(cat $output_json \
      | jq --arg sap_user "$(hana-smp-nancyc-username)" .software.downloader.credentials.sap_user\ =\ \$sap_user \
      | jq --arg sap_password "$(hana-smp-nancyc-password)" .software.downloader.credentials.sap_password\ =\ \$sap_password \
      | jq --arg db_systemdb_password "$(hana-pipeline-db-pwd)" .databases[].credentials.db_systemdb_password\ =\ \$db_systemdb_password \
      | jq --arg os_sidadm_password "$(hana-pipeline-os-pwd)" .databases[].credentials.os_sidadm_password\ =\ \$os_sidadm_password \
      | jq --arg os_sapadm_password "$(hana-pipeline-os-pwd)" .databases[].credentials.os_sapadm_password\ =\ \$os_sapadm_password \
      | jq --arg xsa_admin_password "$(hana-pipeline-db-pwd)" .databases[].credentials.xsa_admin_password\ =\ \$xsa_admin_password \
      | jq --arg cockpit_admin_password "$(hana-pipeline-db-pwd)" .databases[].credentials.cockpit_admin_password\ =\ \$cockpit_admin_password \
      | jq --arg ha_cluster_password "$(hana-pipeline-os-pwd)" .databases[].credentials.ha_cluster_password\ =\ \$ha_cluster_password \
      | jq --arg sa_name "${sa_name}" .software.storage_account_sapbits.name\ =\ \$sa_name \
      | jq --arg sa_storage_access_key "${sa_storage_access_key}" .software.storage_account_sapbits.storage_access_key\ =\ \$sa_storage_access_key \
      | jq --arg sa_file_share_name "${sa_file_share_name}" .software.storage_account_sapbits.file_share_name\ =\ \$sa_file_share_name \
      )
      echo $updated_output_json > $output_json

      ansible-playbook -i ${ws_dir}/ansible_config_files/hosts.yml --private-key ${ws_dir}/sshkey ${repo_dir}/deploy/ansible/sap_playbook.yml
      '
    displayName: "Run Ansible-playbook: Branch ${{parameters.branch_name}}"
    env:
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
